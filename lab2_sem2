#include <iostream>
#include <fstream>
#include <vector>
//proverka
class Vector {
    double* elements;
    int size;

public:
    Vector() : elements(nullptr), size(0) {}

    Vector(int n) : size(n) {
        elements = new double[size];
        for (int i = 0; i < size; ++i)
            elements[i] = 0.0;
    }

    Vector(const double* arr, int n) : size(n) {
        elements = new double[size];
        for (int i = 0; i < size; ++i)
            elements[i] = arr[i];
    }

    Vector(const Vector& sec) : size(sec.size) {
        elements = new double[size];
        for (int i = 0; i < size; ++i)
            elements[i] = sec.elements[i];
    }

    Vector(Vector&& sec)
        : elements(sec.elements), size(sec.size) {
        sec.elements = nullptr;
        sec.size = 0;
    }

    ~Vector() {
        delete[] elements;
    }

    double& operator[](int index) {
        return elements[index];
    }

    Vector& operator=(const Vector& sec) {
        if (this != &sec) {
            delete[] elements;
            size = sec.size;
            elements = new double[size];
            for (int i = 0; i < size; ++i)
                elements[i] = sec.elements[i];
        }
        return *this;
    }

    Vector& operator=(Vector&& sec) {
        if (this != &sec) {
            delete[] elements;
            elements = sec.elements;
            size = sec.size;
            sec.elements = nullptr;
            sec.size = 0;
        }
        return *this;
    }

    friend std::ostream& operator<<(std::ostream& out, const Vector& vec) {
        for (int i = 0; i < vec.size; ++i)
            out << vec.elements[i] << " ";
        return out;
    }

    friend std::istream& operator>>(std::istream& in, Vector& vec) {
        for (int i = 0; i < vec.size; ++i)
            in >> vec.elements[i];
        return in;
    }

    friend Vector operator+(const Vector& l, const Vector& r) {
        Vector result(l.size + r.size);
        for (int i = 0; i < l.size; ++i)
            result[i] = l.elements[i];
        for (int i = 0; i < r.size; ++i)
            result[i + l.size] = r.elements[i];
        return result;
    }
};

int main() {
    std::ifstream inputFile("input.txt");
    if (!inputFile.is_open()) {
        std::cout << "Failed to open input file." << std::endl;
        return 1;
    }

    int n1, n2;
    inputFile >> n1 >> n2;

    Vector vec1(n1), vec2(n2);
    inputFile >> vec1 >> vec2;
    inputFile.close();

    Vector sum = vec1 + vec2;

    std::ofstream outputFile("output.txt");
    if (!outputFile.is_open()) {
        std::cout << "Failed to open output file." << std::endl;
        return 1;
    }

    outputFile << "Vector 1: " << vec1 << std::endl;
    outputFile << "Vector 2: " << vec2 << std::endl;
    outputFile << "Sum: " << sum << std::endl;
    outputFile.close();

    return 0;
}
